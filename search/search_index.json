{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":""},{"location":"#introduction","title":"Introduction","text":"<p>Welcome to the Sheetson API! You can use our API to access data in any Google Sheet file that you have access to. Basically, every Google Sheet file is a database, and each tab within that file is a table. Sheetson API is designed around these definition.</p>"},{"location":"#api-endpoint","title":"API Endpoint","text":"<p>All API calls must be made to <code>https://api.sheetson.com</code></p>"},{"location":"#json-only","title":"JSON only","text":"<p>All responses will be in JSON. Input data passed through the request body can be form-encoded or JSON-encoded. If using a JSON body, please specify the <code>Content-Type</code> header as <code>application/json</code>.</p>"},{"location":"#string-only","title":"String-only","text":"<p>Currently, all values in row object are returned with an exception of rowIndex which is automatically added to the results set.</p>"},{"location":"#keys-authentication","title":"Keys &amp; Authentication","text":"<p>In order to protect your data, all API requests to Sheetson require an API Key which can be obtained in Dashboard</p> <p>You need to add <code>apiKey</code> as an URL parameter, otherwise the request would return a <code>403</code> status code.</p> <p>Note</p> <p>For data-manipulating operations (create, update, delete), <code>Authentication</code> header with API Key as the value is expected in the request.</p> <p>Authentication: Bearer <code>YOUR_API_KEY</code></p>"},{"location":"#status-codes","title":"Status Codes","text":"<p>Every API request to Sheetson API returns a HTTP status code that reflect the result. Following codes should be returned by Sheetson API.</p>"},{"location":"#successful-requests","title":"Successful requests","text":"<p>Every API request to Sheetson API returns a HTTP status code that reflect the result. Following codes should be returned by Sheetson API.</p> CODE MEANING <code>200 OK</code> A resource has been retrieved (GET requests) <code>201 Created</code> A resource has been created (POST requests) <code>204 No Content</code> A resource has been deleted (DELETE requests)"},{"location":"#failed-requests","title":"Failed requests","text":"<p>APIs that failed to fulfill its purpose should still have <code>200 OK</code> status code, but their response body should tell more about type of error. See Status Codes for more information.</p>"},{"location":"crud/","title":"Crud","text":"<p>This guide explains how to use simple CRUD API requests with data within a worksheet as below:</p> <ul> <li>Create a new row</li> <li>Retrieve a specific row</li> <li>Update a specific row</li> <li>Delete a specific row</li> </ul> <p>If you want to know how to retrieve complex data, see Advanced Queries</p>"},{"location":"crud/#create-a-new-row","title":"Create a new row","text":"<p>Below API specs allow to create a new row at the last row of a worksheet.</p>"},{"location":"crud/#http-request","title":"HTTP Request","text":"<p><code>POST https://api.sheetson.com/v2/sheets/{sheetName}</code></p>"},{"location":"crud/#path-parameters","title":"Path Parameters","text":"Parameters <code>sheetName</code> <code>string</code>  Name of the sheet containing data"},{"location":"crud/#headers","title":"Headers","text":"Parameters <code>Authorization</code> <code>Bearer YOUR_API_KEY</code> <code>X-Spreadsheet-Id</code> <code>string</code>  The ID of the spreadsheet to create new a row"},{"location":"crud/#request-body","title":"Request body","text":"<p>Request body contains object with keys are worksheet headers and values to add into cell.</p>"},{"location":"crud/#response-body","title":"Response body","text":"<p>Response body contains JSON object with <code>rowIndex</code> and requesting data.</p>"},{"location":"crud/#examples-request","title":"Examples (Request)","text":"cURLJavascript <pre><code>curl \"http://api.sheetson.com/v2/sheets/Demo\" \\\n-X POST \\\n-H \"API-Key: YOUR_API_KEY\" \\\n-H \"X-Spreadsheet-Id: 1h-Eet6qTsPrdL5IVwiAvPXH47wjEludJVpwrpdCWEuM\" \\\n-H \"Content-Type: application/json\" \\\n-d '{\"email\" : \"something@example.com\"}'\n</code></pre> <pre><code>const fetch = require('isomorphic-fetch');\nfetch(\"http://api.sheetson.com/v2/sheets/Demo\", {\n  method: \"POST\",\n  headers: {\n    \"Authorization\": \"Bearer YOUR_API_KEY\",\n    \"X-Spreadsheet-Id\": \"1h-Eet6qTsPrdL5IVwiAvPXH47wjEludJVpwrpdCWEuM\"\n  },\n  body: JSON.stringify({email: \"something@example.com\"})\n}).then(r =&gt; r.json())\n.then(result =&gt; console.log(result))\n</code></pre>"},{"location":"crud/#example-json-response","title":"Example (JSON Response)","text":"<pre><code>{\n  \"rowIndex\": 1234,\n  \"email\": \"something@example.com\"\n}\n</code></pre>"},{"location":"crud/#retrieve-multiple-rows","title":"Retrieve multiple rows","text":""},{"location":"crud/#retrieve-a-row","title":"Retrieve a row","text":"<p>Below API specs allow to retrieve a row data at a specific index of a worksheet.</p>"},{"location":"crud/#http-request_1","title":"HTTP Request","text":"<p><code>GET https://api.sheetson.com/v2/sheets/{sheetName}/{rowIndex}</code></p>"},{"location":"crud/#path-parameters_1","title":"Path Parameters","text":"Parameters <code>sheetName</code> <code>string</code>  Name of the sheet containing data <code>rowIndex</code> <code>number</code> Position of the row to retrieve data"},{"location":"crud/#headers_1","title":"Headers","text":"Parameters <code>Authorization</code> <code>Bearer YOUR_API_KEY</code> <code>X-Spreadsheet-Id</code> <code>string</code>  The ID of the spreadsheet to create new a row"},{"location":"crud/#request-body_1","title":"Request body","text":"<p>No request body is required.</p>"},{"location":"crud/#response-body_1","title":"Response body","text":"<p>Response body contains JSON object with <code>rowIndex</code> and all cell data that has headers.</p>"},{"location":"crud/#examples-request_1","title":"Examples (Request)","text":"cURLJavascript <pre><code>curl \"http://api.sheetson.com/v2/sheets/Demo/1\" \\\n-H \"API-Key: YOUR_API_KEY\" \\\n-H \"X-Spreadsheet-Id: 1h-Eet6qTsPrdL5IVwiAvPXH47wjEludJVpwrpdCWEuM\" \\\n</code></pre> <pre><code>const fetch = require('isomorphic-fetch');\nfetch(\"http://api.sheetson.com/v2/sheets/Demo\", {\n  headers: {\n    \"Authorization\": \"Bearer YOUR_API_KEY\",\n    \"X-Spreadsheet-Id\": \"1h-Eet6qTsPrdL5IVwiAvPXH47wjEludJVpwrpdCWEuM\"\n  }\n}).then(r =&gt; r.json())\n.then(result =&gt; console.log(result))\n</code></pre>"},{"location":"crud/#example-json-response_1","title":"Example (JSON Response)","text":"<pre><code>{\n  \"rowIndex\": 1234,\n  \"email\": \"something@example.com\",\n  \"username\": \"iamcool\",\n  \"phone\": \"+12983736165\",\n  \"avatar\": \"https://source.unsplash.com/random\"\n\n}\n</code></pre>"},{"location":"crud/#update-a-row","title":"Update a row","text":"<p>Below API specs allow to update data of a specific row of a worksheet.</p>"},{"location":"crud/#http-request_2","title":"HTTP Request","text":"<p><code>POST https://api.sheetson.com/v2/sheets/{sheetName}/{rowIndex}</code></p>"},{"location":"crud/#path-parameters_2","title":"Path Parameters","text":"Parameters <code>sheetName</code> <code>string</code>  Name of the sheet containing data <code>rowIndex</code> <code>number</code> Position of the row to retrieve data"},{"location":"crud/#headers_2","title":"Headers","text":"Parameters <code>Authorization</code> <code>Bearer YOUR_API_KEY</code> <code>X-Spreadsheet-Id</code> <code>string</code>  The ID of the spreadsheet to create new a row"},{"location":"crud/#request-body_2","title":"Request body","text":"<p>Request body contains object with keys are worksheet headers and values to update into cell.</p>"},{"location":"crud/#response-body_2","title":"Response body","text":"<p>Response body contains JSON object with <code>rowIndex</code> and requesting data.</p>"},{"location":"crud/#examples-request_2","title":"Examples (Request)","text":"cURLJavascript <pre><code>curl \"http://api.sheetson.com/v2/sheets/Demo/1234\" \\\n-X POST \\\n-H \"API-Key: YOUR_API_KEY\" \\\n-H \"X-Spreadsheet-Id: 1h-Eet6qTsPrdL5IVwiAvPXH47wjEludJVpwrpdCWEuM\" \\\n-H \"Content-Type: application/json\" \\\n-d '{\"email\" : \"something@example.com\"}'\n</code></pre> <pre><code>const fetch = require('isomorphic-fetch');\nfetch(\"http://api.sheetson.com/v2/sheets/Demo\", {\n  method: \"POST\",\n  headers: {\n    \"Authorization\": \"Bearer YOUR_API_KEY\",\n    \"X-Spreadsheet-Id\": \"1h-Eet6qTsPrdL5IVwiAvPXH47wjEludJVpwrpdCWEuM\"\n  },\n  body: JSON.stringify({email: \"something@example.com\"})\n}).then(r =&gt; r.json())\n.then(result =&gt; console.log(result))\n</code></pre>"},{"location":"crud/#example-json-response_2","title":"Example (JSON Response)","text":"<pre><code>{\n  \"rowIndex\": 1234,\n  \"email\": \"something@example.com\"\n}\n</code></pre>"},{"location":"crud/#remove-a-row","title":"Remove a row","text":""},{"location":"getting-started/","title":"Getting Started","text":""},{"location":"getting-started/#preparing-worksheets","title":"Preparing worksheets","text":"<p>It is mandatory that you should always identify the first row of your sheet as header. You can use any character or any length, but it is recommended to use alphanumeric characters only. Take this sheet below as an example</p> A B C D 1 name state country population 2 San Francisco CA USA 3314000 3 Los Angeles CA USA 12458000 4 Washington, D.C. null USA 5207000 5 Tokyo null Japan 37400068 6 Shanghai null China 25582000 7 Paris null France 10901000 8 S\u00e3o Paulo null Brazil 21650000 9 Madrid null Spain 6497000 10 Toronto null Canada 6082000 11 Chicago IL USA 8864000 <p>The fields <code>name</code>, <code>state</code>, <code>country</code> and <code>population</code> will be used as object keys. Each row afterwards are transferred to below JSON:</p> <pre><code>{\n  \"rowIndex\": 2\n  \"name\": \"San Francisco\",\n  \"state\": \"CA\",\n  \"country\": \"USA\",\n  \"population\": \"3314000\"\n}\n</code></pre>"},{"location":"getting-started/#sharing-your-spreadsheet","title":"Sharing your spreadsheet","text":"<p>Sheetson has taken security serious by not letting your spreadsheet published to the world. Instead, you only need to share your spreadsheet with our email <code>google@sheetson.com</code> as an editor, then we will handle the rest.</p> <p></p>"},{"location":"getting-started/#getting-spreadsheet-id-and-sheet-name","title":"Getting spreadsheet ID and sheet name","text":"<p>Spreadsheet ID and Sheet Name are required to manipulate data. Below is a guide where you can find such information.</p> <p>Sheet Name is case sensitive, so please make sure you use correct name when making API requests.</p> <p></p>"},{"location":"status-codes/","title":"Error Codes","text":"<p>All error responses will contain an object with below attributes:</p> CODE MEANING <code>400 Bad Request</code> Invalid request parameters <code>401 Unauthorized</code> Incorrect or missing API key, spreadsheetId or sheetName <p>All error responses will contain a JSON with <code>code</code> and <code>message</code> fields that explains the error.</p> Name Code Meaning SpreadsheetIdNotFoundException 101 Spreadsheet ID is not available NoHeaderRowException 102 Spreadsheet does not have a header row UpdateRowNotFoundException 103 Row is not found to update InvalidBodyException 104 Request body is invalid. This could be because you send an empty or malformed body. WorksheetNotFoundException 105 The requesting worksheet is not availble in the spreadsheet. This could be because you use a wrong name or case-sensitive name."},{"location":"examples/faq/","title":"Build an FAQ with Sheetson and Bootstap 4","text":""},{"location":"examples/faq/#what-are-we-going-to-build","title":"What are we going to build?","text":"<p>We will build a simple FAQ section that can be embeded in your website. The stack we use is:</p> <ul> <li>Bootstap 4</li> <li>jQuery</li> <li>HandlebarsJS</li> </ul> <p> View demo</p>"},{"location":"examples/faq/#what-do-we-need-before-we-get-started","title":"What do we need before we get started?","text":"<p>To get started, please make sure you have prepared below requirements</p> <ul> <li>Make a copy of this Google Sheet </li> <li>Follow our Getting Started guide to get spreadsheet ID and sheet name</li> <li>A computer with Internet connection</li> <li>Your favourite text editor </li> </ul> <p>## Importing libraries and stylesheets Let's say we have a basic HTML structure as below:</p> <pre><code>&lt;html&gt;\n&lt;head&gt;\n\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div id=\"faq\"&gt;Loading FAQs...&lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Add below scripts/links inside <code>&lt;head&gt;</code> tag of your HTML file in order to use Bootstap 4, JQuery and HandlebarsJS.</p> <pre><code>&lt;link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/4.5.0/css/bootstrap.min.css\"/&gt;\n&lt;script type=\"text/javascript\" src=\"https://cdnjs.cloudflare.com/ajax/libs/handlebars.js/4.0.12/handlebars.min.js\"&gt;&lt;/script&gt;\n&lt;script type=\"text/javascript\" src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js\"&gt;&lt;/script&gt;\n&lt;script src=\"https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/4.5.0/js/bootstrap.min.js\" &gt;&lt;/script&gt;\n</code></pre>"},{"location":"examples/faq/#defining-handlebarsjs-template","title":"Defining HandleBarsJS template","text":"<p>Continue after adding above files, we will add below code which is still inside <code>&lt;head&gt;</code> tag. </p> <pre><code>&lt;script id=\"item-template\" type=\"text/x-handlebars-template\"&gt;\n        &lt;div class=\"container py-3\"&gt;\n    &lt;div class=\"row\"&gt;\n        &lt;div class=\"col-10 mx-auto\"&gt;\n            &lt;div class=\"accordion\" id=\"faqExample\"&gt;\n              {{#each this}}\n                &lt;div class=\"card\"&gt;\n                    &lt;div class=\"card-header p-2\" id=\"heading{{rowIndex}}\"&gt;\n                        &lt;h5 class=\"mb-0\"&gt;\n                            &lt;button class=\"btn btn-link\" type=\"button\" data-toggle=\"collapse\" data-target=\"#collapse{{rowIndex}}\" aria-expanded=\"false\" aria-controls=\"collapse{{rowIndex}}\"&gt;\n                              Q: {{question}}\n                            &lt;/button&gt;\n                          &lt;/h5&gt;\n                    &lt;/div&gt;\n\n                    &lt;div id=\"collapse{{rowIndex}}\" class=\"collapse\" aria-labelledby=\"heading{{rowIndex}}\" data-parent=\"#faqExample\"&gt;\n                        &lt;div class=\"card-body\"&gt;\n                            &lt;b&gt;Answer:&lt;/b&gt; {{answer}}\n                        &lt;/div&gt;\n                    &lt;/div&gt;\n                &lt;/div&gt;\n              {{/each}}\n            &lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/script&gt;\n</code></pre>"},{"location":"examples/faq/#fetching-data-bind-to-html","title":"Fetching data &amp; bind to HTML","text":"<p>Right before closing <code>&lt;/head&gt;</code> tag, paste below code to set up JQuery to make API call and bind data to the template we defined earlier. Remember to replace <code>YOUR_API_KEY</code> and <code>YOUR_SPREADSHEET_ID</code> with real credentials acquired from earlier steps.</p> <pre><code>&lt;script type=\"text/javascript\"&gt;\n        $(document).ready(function(){\n      fetch('https://api.sheetson.com/v2/sheets/FAQ', {\n        withCredentials: true,\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': 'Bearer YOUR_API_KEY',\n          'X-Sheetson-Spreadsheet-Id': 'YOUR_SPREADSHEET_ID'\n        }\n      }).then(r =&gt; r.json())\n      .then(data =&gt; {\n        var template = Handlebars.compile($('#item-template').html())\n        $('#faq').html(template(data.results))\n      })\n      .catch(error =&gt; console.log(error))\n    })\n    &lt;/script&gt;\n</code></pre> <p>Save the file and you can open it using Chrome or Firefox.</p>"},{"location":"examples/portfolio/","title":"Build a portfolio with Sheetson and VueJS","text":""},{"location":"examples/portfolio/#what-are-we-going-to-build","title":"What are we going to build?","text":"<p>We will build a simple portfolio website that has header, portfolio items and footer. The data is loaded from a Google Sheet using Sheetson. The stack we will use includes:</p> <ul> <li>VueJS</li> <li>TailwindCSS</li> <li>Axios (for making API request)</li> </ul> <p> View demo</p>"},{"location":"examples/portfolio/#what-do-we-need-before-we-get-started","title":"What do we need before we get started?","text":"<p>To get started, please make sure you have prepared below requirements</p> <ul> <li>Make a copy of this Google Sheet </li> <li>Follow our Getting Started guide to get spreadsheet ID and sheet name</li> <li>A computer with Internet connection</li> <li>Your favourite text editor </li> </ul>"},{"location":"examples/portfolio/#spreadsheet-structure","title":"Spreadsheet structure","text":"<p>In the copied Google Sheet, you should see 2 sheets named <code>Meta</code> and <code>PortfolioItems</code>. Meta manages website inormation, while PortfolioItems controls what projects to display in the porfolio grid. </p>"},{"location":"examples/portfolio/#importing-libraries-and-stylesheets","title":"Importing libraries and stylesheets","text":"<p>Let's say we have a basic HTML structure as below:</p> <pre><code>&lt;html&gt;\n&lt;head&gt;\n\n&lt;/head&gt;\n&lt;body&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Add below scripts/links inside <code>&lt;head&gt;</code> tag of your HTML file in order to use TailwindCSS, VueJS and Axios.</p> <pre><code>&lt;link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/tailwindcss/1.4.0/tailwind.min.css\"/&gt;\n&lt;script type=\"text/javascript\" src=\"https://cdnjs.cloudflare.com/ajax/libs/vue/2.6.11/vue.min.js\"&gt;&lt;/script&gt;\n&lt;script type=\"text/javascript\" src=\"https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js\"&gt;&lt;/script&gt;\n</code></pre>"},{"location":"examples/portfolio/#defining-vuejs-template","title":"Defining VueJS template","text":"<p>Right after the opening <code>&lt;body&gt;</code> tag, paste below template that will render as main HTML of the website. There are some variables that VueJS used to append data fetched from the API.</p> <pre><code>&lt;div id=\"app\"&gt;\n  &lt;header class=\"bg-teal-800 p-6 shadow-lg\"&gt;\n    &lt;div class=\"container mx-auto\"&gt;\n      &lt;nav class=\"flex items-center justify-between flex-wrap\"&gt;\n        &lt;div class=\"flex items-center flex-shrink-0 text-white mr-6\"&gt;\n          &lt;span class=\"font-semibold text-xl tracking-tight\"&gt;{{ meta.title }}&lt;/span&gt;\n        &lt;/div&gt;\n        &lt;a :href=\"meta.readMore\" class=\"text-white hover:text-teal-300 py-2 rounded-lg\" target=\"_blank\"&gt;Read More &amp;#8594;&lt;/a&gt;\n      &lt;/nav&gt;\n    &lt;/div&gt;\n  &lt;/header&gt;\n  &lt;main&gt;\n    &lt;div class=\"bg-auto\" style=\"background-image: url(https://source.unsplash.com/njUBfL1Oc3Y/1600x900)\"&gt;\n      &lt;div class=\"bg-teal-800 bg-opacity-75 mx-auto pt-48 pb-8 text-center\"&gt;\n        &lt;p class=\"text-3xl text-white font-bold\"&gt;{{meta.introduction}}&lt;/p&gt;\n        &lt;p class=\"mx-auto text-white pt-32 pb-8\"&gt;{{meta.subintro}}&lt;/p&gt;\n      &lt;/div&gt;\n\n    &lt;/div&gt;\n    &lt;div class=\"container mx-auto\"&gt;\n      &lt;div class=\"flex flex-wrap -mx-3 py-8\"&gt;\n        &lt;div class=\"w-1/1 md:w-1/2 lg:w-1/3 px-3 pb-6\" v-for=\"item in items\"&gt;\n          &lt;div class=\"rounded overflow-hidden shadow-lg\"&gt;\n            &lt;a :href=\"item.link\"&gt;\n              &lt;img class=\"w-full object-cover h-64\" :src=\"item.screenshot\" :alt=\"item.title\"&gt;\n            &lt;/a&gt;\n            &lt;div class=\"px-6 py-4\"&gt;\n              &lt;div class=\"font-bold text-xl mb-2\"&gt;{{ item.title }}&lt;/div&gt;\n              &lt;p class=\"text-gray-700 text-base\"&gt;{{ item.description }}&lt;/p&gt;\n            &lt;/div&gt;\n            &lt;div class=\"px-6 py-4\"&gt;\n              &lt;span class=\"inline-block bg-gray-200 rounded-full px-3 py-1 text-sm font-semibold text-gray-700 mr-2\" v-for=\"tag in getTags(item.tags)\"&gt;#{{ tag }}&lt;/span&gt;\n            &lt;/div&gt;\n          &lt;/div&gt;\n        &lt;/div&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/main&gt;\n  &lt;footer&gt;\n    &lt;div class=\"container mx-auto pb-8 text-gray-500\"&gt;{{ meta.footer }}&lt;/div&gt;\n  &lt;/footer&gt;\n&lt;/div&gt;\n</code></pre>"},{"location":"examples/portfolio/#fetching-data-and-binding-vuejs","title":"Fetching data and binding VueJS","text":"<p>Right before closing <code>&lt;/body&gt;</code> tag, paste below code to set up VueJS and Axios to make API call and bind data to the template we defined earlier. Remember to replace <code>YOUR_API_KEY</code> and <code>YOUR_SPREADSHEET_ID</code> with real credentials acquired from earlier steps.</p> <pre><code>&lt;script&gt;\nvar app = new Vue({\n  el: '#app',\n  data: {\n    meta: [], // Meta data from Google Sheet\n    items: [] // Items data from Google Sheet\n  },\n  mounted () {\n    // Fetch the Meta data from Sheetson API\n    axios\n      .get('https://api.sheetson.com/v2/sheets/Meta', {\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': 'Bearer YOUR_API_KEY',\n          'X-Sheetson-Spreadsheet-Id': 'YOUR_SPREADSHEET_ID'\n        }\n      })\n      .then(response =&gt; (this.meta = response.data.results[0]))\n\n    // Fetch the Items data from Sheetson API\n    axios\n      .get('https://api.sheetson.com/v2/sheets/PortfolioItems', {\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': 'Bearer YOUR_API_KEY',\n          'X-Sheetson-Spreadsheet-Id': 'YOUR_SPREADSHEET_ID'\n        }\n      })\n      .then(response =&gt; (this.items = response.data.results))\n  },\n  methods: {\n    // Convert comma seperated tags to an array\n    getTags: function (tags) {\n      return tags.split(',')\n    }\n  }\n})\n&lt;/script&gt;\n</code></pre> <p>Save the file and you can open it using Chrome or Firefox.</p>"},{"location":"manage-data/create-rows/","title":"Creating Rows","text":""},{"location":"manage-data/create-rows/#example-data","title":"Example data","text":"<p>To get started, we prepare a sheet named Cities as below:</p> A B C D 1 name state country population 2 <p>Note</p> <p>Please prepare the same data as above in a new (or existing) spreadsheet. You will need to use your Spreadsheet ID as descibed in Getting Started in example codes.</p>"},{"location":"manage-data/create-rows/#add-a-row","title":"Add a row","text":"<p>To create a new row in Cities sheet, send a POST request to that sheet API endpoint containing the contents of the row.</p> cURLJavascript <pre><code>curl \"https://api.sheetson.com/v2/sheets/Cities\" \\\n-X POST \\\n-H \"Authorization: Bearer YOUR_API_KEY\" \\\n-H \"X-Spreadsheet-Id: YOUR_SPREADSHEET_ID\" \\\n-H \"Content-Type: application/json\" \\\n-d '{\"name\": \"San Francisco\", \"state\": \"CA\", \"country\": \"USA\", \"population\": \"860000\"}'\n</code></pre> <pre><code>const fetch = require('isomorphic-fetch');\nfetch(\"https://api.sheetson.com/v2/sheets/Cities\", {\n  method: \"POST\",\n  headers: {\n    \"Authorization\": \"Bearer YOUR_API_KEY\",\n    \"X-Spreadsheet-Id\": \"YOUR_SPREADSHEET_ID\",\n    \"Content-Type\": \"application/json\"\n  },\n  body: JSON.stringify({name: 'San Francisco', state: 'CA', country: 'USA', population: 860000})\n}).then(r =&gt; r.json())\n.then(result =&gt; console.log(result))\n</code></pre> <p>When the creation is successful, the HTTP response is a <code>201 Created</code> and response body is a JSON object containing the <code>rowIndex</code> of the newly created row: <pre><code>{\n  \"rowIndex\": 2,\n  \"name\": \"San Francisco\", \n  \"state\": \"CA\", \n  \"country\": \"USA\",\n  \"population\": \"860000\"\n}\n</code></pre> The sheet content should look like below:</p> A B C D 1 name state country population 2 San Francisco CA USA 860000"},{"location":"manage-data/delete-rows/","title":"Deleting Rows","text":""},{"location":"manage-data/delete-rows/#example-data","title":"Example data","text":"<p>To get started, we prepare a sheet named Cities as below:</p> A B C D 1 name state country population 2 San Francisco CA USA 3314000 3 Gotham City NJ USA 30000000 <p>Note</p> <p>Please prepare the same data as above in a new (or existing) spreadsheet. You will need to use your Spreadsheet ID as descibed in Getting Started in example codes.</p>"},{"location":"manage-data/delete-rows/#delete-a-row","title":"Delete a row","text":"<p>To delete a row from Cities sheet, send a DELETE request to its <code>rowIndex</code> URL.</p> cURLJavascript <pre><code>curl \"https://api.sheetson.com/v2/sheets/Cities/3\" \\\n-X DELETE \\\n-H \"Authorization: Bearer YOUR_API_KEY\" \\\n-H \"X-Spreadsheet-Id: YOUR_SPREADSHEET_ID\" \\\n</code></pre> <pre><code>const fetch = require('isomorphic-fetch');\nfetch(\"https://api.sheetson.com/v2/sheets/Cities/3\", {\n  method: \"DELETE\",\n  headers: {\n    \"Authorization\": \"Bearer YOUR_API_KEY\",\n    \"X-Spreadsheet-Id\": \"YOUR_SPREADSHEET_ID\"\n  }\n}).then(r =&gt; r.json())\n.then(result =&gt; console.log(result))\n</code></pre> <p>When the deletion is successful, the HTTP response is a <code>204 No-Content</code> without any response body. The sheet content should look like below:</p> A B C D 1 name state country population 2 San Francisco CA USA 3314000"},{"location":"manage-data/paginate-filter/","title":"Paginate &amp; Filter Data","text":"<p>Paginating and data filter is required in many applications to display data that is relevant to users. With Sheetson API, there are many ways to narrow down massive data.</p>"},{"location":"manage-data/paginate-filter/#example-data","title":"Example data","text":"<p>To get started, we prepare a sheet named Cities as below:</p> A B C D 1 name state country population 2 San Francisco CA USA 3314000 3 Los Angeles CA USA 12458000 4 Washington, D.C. null USA 5207000 5 Tokyo null Japan 37400068 6 Shanghai null China 25582000 7 Paris null France 10901000 8 S\u00e3o Paulo null Brazil 21650000 9 Madrid null Spain 6497000 10 Toronto null Canada 6082000 11 Chicago IL USA 8864000 <p>Note</p> <p>Please prepare the same data as above in a new (or existing) spreadsheet. You will need to use your Spreadsheet ID as descibed in Getting Started in example codes.</p>"},{"location":"manage-data/paginate-filter/#search-data","title":"Search data","text":"<p>Search data is only available in paid plans.</p> <p>We can look up data in a worksheet in several ways by using <code>where</code> URL parameter. The value of the where parameter should be JSON encoded. To look up cities in USA:</p> cURLJavascript <pre><code>curl \"https://api.sheetson.com/v2/sheets/Cities\" \\\n-G --data-urlencode 'where={\"country\":\"USA}' \\\n--data-urlencode 'apiKey=YOUR_API_KEY' \\\n--data-urlencode 'spreadsheetId=YOUR_SPREADSHEET_ID' \\\n</code></pre> <pre><code>const fetch = require('isomorphic-fetch');\nconst params = {\n  where: '{\"country\":\"USA\"}',\n  apiKey: \"YOUR_API_KEY\",\n  spreadsheetId: \"YOUR_SPREADSHEET_ID\"\n}\nconst url = = new URL(\"https://api.sheetson.com/v2/sheets/Cities\");\nObject.keys(params).forEach(key =&gt; url.searchParams.append(key, encodeURIComponent(params[key])));\nfetch(url).then(r =&gt; r.json())\n  .then(result =&gt; console.log(result))\n</code></pre> <p>See this lis below for all supported operations in <code>where</code> parameter:</p>    | Key | Operation |-----|------------ |$lt  | Less Than |$lte | Less Than or Equal To |$gt  | Greater Than |$gte | Greater Than or Equal To |$eq  | Equal To |$neq | Not Equal To |$text| Search for specific text (not case-sensitive)   <p>For example, to retrieve cities with population between 10,000,000 and 30,000,000:</p> cURLJavascript <pre><code>curl \"https://api.sheetson.com/v2/sheets/Cities\" \\\n-G --data-urlencode 'where={\"population\": {\"$gte\": 10000000, \"$lte\": 30000000}}' \\\n--data-urlencode 'apiKey=YOUR_API_KEY' \\\n--data-urlencode 'spreadsheetId=YOUR_SPREADSHEET_ID' \\\n</code></pre> <pre><code>const fetch = require('isomorphic-fetch');\nconst params = {\n  where: '{\"population\": {\"$gte\": 10000000, \"$lte\": 30000000}}',\n  apiKey: \"YOUR_API_KEY\",\n  spreadsheetId: \"YOUR_SPREADSHEET_ID\"\n}\nconst url = = new URL(\"https://api.sheetson.com/v2/sheets/Cities\");\nObject.keys(params).forEach(key =&gt; url.searchParams.append(key, encodeURIComponent(params[key])));\nfetch(url).then(r =&gt; r.json())\n  .then(result =&gt; console.log(result))\n</code></pre>"},{"location":"manage-data/paginate-filter/#order-data","title":"Order data","text":"<p>Order data is only available in paid plans.</p> <p>By default, rows are returned by order displayed in a worksheet. We can use the order parameter to specify a field to sort by. Prefixing with a negative sign reverses the order. In order to retrieve cities by population ascending order:</p> cURLJavascript <pre><code>curl \"https://api.sheetson.com/v2/sheets/Cities\" \\\n-G --data-urlencode 'order=population' \\\n--data-urlencode 'apiKey=YOUR_API_KEY' \\\n--data-urlencode 'spreadsheetId=YOUR_SPREADSHEET_ID' \\\n</code></pre> <pre><code>const fetch = require('isomorphic-fetch');\nconst params = {\n  order: \"population\",\n  apiKey: \"YOUR_API_KEY\",\n  spreadsheetId: \"YOUR_SPREADSHEET_ID\"\n}\nconst url = = new URL(\"https://api.sheetson.com/v2/sheets/Cities\");\nObject.keys(params).forEach(key =&gt; url.searchParams.append(key, encodeURIComponent(params[key])));\nfetch(url).then(r =&gt; r.json())\n  .then(result =&gt; console.log(result))\n</code></pre> <p>To get cities by population in descending order:</p> cURLJavascript <pre><code>curl \"https://api.sheetson.com/v2/sheets/Cities\" \\\n-G --data-urlencode 'order=-population' \\\n--data-urlencode 'apiKey=YOUR_API_KEY' \\\n--data-urlencode 'spreadsheetId=YOUR_SPREADSHEET_ID' \\\n</code></pre> <pre><code>const fetch = require('isomorphic-fetch');\nconst params = {\n  order: \"-population\",\n  apiKey: \"YOUR_API_KEY\",\n  spreadsheetId: \"YOUR_SPREADSHEET_ID\"\n}\nconst url = = new URL(\"https://api.sheetson.com/v2/sheets/Cities\");\nObject.keys(params).forEach(key =&gt; url.searchParams.append(key, encodeURIComponent(params[key])));\nfetch(url).then(r =&gt; r.json())\n  .then(result =&gt; console.log(result))\n</code></pre>"},{"location":"manage-data/paginate-filter/#paginate-data","title":"Paginate data","text":"<p>By default, each time we request multiple rows, the maximum number of rows to return is 24. We can also increase this upto 100 by specifying <code>limit</code> parameter in the URL. Combining with <code>skip</code>, we can paginate between set of rows.</p> cURLJavascript <pre><code>curl \"https://api.sheetson.com/v2/sheets/Cities\" \\\n-G \\\n--data-urlencode 'skip=100' \\\n--data-urlencode 'limit=100' \\\n--data-urlencode 'apiKey=YOUR_API_KEY' \\\n--data-urlencode 'spreadsheetId=YOUR_SPREADSHEET_ID' \\\n</code></pre> <pre><code>const fetch = require('isomorphic-fetch');\nconst params = {\n  skip: 100,\n  limit: 100,\n  apiKey: \"YOUR_API_KEY\",\n  spreadsheetId: \"YOUR_SPREADSHEET_ID\"\n}\nconst url = = new URL(\"https://api.sheetson.com/v2/sheets/Cities\");\nObject.keys(params).forEach(key =&gt; url.searchParams.append(key, encodeURIComponent(params[key])));\nfetch(url).then(r =&gt; r.json())\n  .then(result =&gt; console.log(result))\n</code></pre> <p>Tip</p> <p>Along with <code>results</code>, we also include <code>hasNextPage</code> field in response data in order to let you know if there's more data after current set. This field always returns either <code>true</code> or <code>false</code>.</p>"},{"location":"manage-data/paginate-filter/#restrict-fields-returned","title":"Restrict fields returned","text":"<p>To save bandwidth, we can choose to return only needed fields by using <code>keys</code> parameter. </p> cURLJavascript <pre><code>curl \"https://api.sheetson.com/v2/sheets/Cities\" \\\n-G \\\n--data-urlencode 'keys=name,country' \\\n--data-urlencode 'apiKey=YOUR_API_KEY' \\\n--data-urlencode 'spreadsheetId=YOUR_SPREADSHEET_ID' \\\n</code></pre> <pre><code>const fetch = require('isomorphic-fetch');\nconst params = {\n  keys: \"name,country\",\n  apiKey: \"YOUR_API_KEY\",\n  spreadsheetId: \"YOUR_SPREADSHEET_ID\"\n}\nconst url = = new URL(\"https://api.sheetson.com/v2/sheets/Cities\");\nObject.keys(params).forEach(key =&gt; url.searchParams.append(key, encodeURIComponent(params[key])));\nfetch(url).then(r =&gt; r.json())\n  .then(result =&gt; console.log(result))\n</code></pre>"},{"location":"manage-data/retrieve-rows/","title":"Retrieving Rows","text":""},{"location":"manage-data/retrieve-rows/#example-data","title":"Example data","text":"<p>To get started, we prepare a sheet named Cities as below:</p> A B C D 1 name state country population 2 San Francisco CA USA 3314000 3 Los Angeles CA USA 12458000 4 Washington, D.C. null USA 5207000 5 Tokyo null Japan 37400068 6 Shanghai null China 25582000 7 Paris null France 10901000 8 S\u00e3o Paulo null Brazil 21650000 9 Madrid null Spain 6497000 10 Toronto null Canada 6082000 11 Chicago IL USA 8864000 <p>Note</p> <p>Please prepare the same data as above in a new (or existing) spreadsheet. You will need to use your Spreadsheet ID as descibed in Getting Started in example codes.</p>"},{"location":"manage-data/retrieve-rows/#get-a-row","title":"Get a row","text":"<p>You can retrieve a row's contents by sending a GET request to the <code>rowIndex</code> URL. For example, to retrieve Los Angeles information in Cities sheet:</p> cURLJavascript <pre><code>curl \"https://api.sheetson.com/v2/sheets/Cities/3\" \\\n-G \\\n--data-urlencode 'apiKey=YOUR_API_KEY' \\\n--data-urlencode 'spreadsheetId=YOUR_SPREADSHEET_ID' \\\n</code></pre> <pre><code>const fetch = require('isomorphic-fetch');\nconst params = {\n  apiKey: \"YOUR_API_KEY\",\n  spreadsheetId: \"YOUR_SPREADSHEET_ID\"\n}\nconst url = = new URL(\"https://api.sheetson.com/v2/sheets/Cities/3\");\nObject.keys(params).forEach(key =&gt; url.searchParams.append(key, encodeURIComponent(params[key])));\nfetch(url).then(r =&gt; r.json())\n  .then(result =&gt; console.log(result))\n</code></pre> <p>The response body is a JSON object containing all the header fields, plus the <code>rowIndex</code> field: <pre><code>{\n  \"rowIndex\": 3,\n  \"name\": \"Los Angeles\", \n  \"state\": \"CA\", \n  \"country\": \"USA\",\n  \"population\": \"12458000\"\n}\n</code></pre></p>"},{"location":"manage-data/retrieve-rows/#get-multiple-rows","title":"Get multiple rows","text":"<p>You can retrieve multiple objects at once by sending a <code>GET</code> request to the class URL. Without any URL parameters, this simply lists objects in the class:</p> cURLJavascript <pre><code>curl \"https://api.sheetson.com/v2/sheets/Cities\" \\\n--data-urlencode 'apiKey=YOUR_API_KEY' \\\n--data-urlencode 'spreadsheetId=YOUR_SPREADSHEET_ID' \\\n</code></pre> <pre><code>const fetch = require('isomorphic-fetch');\nconst params = {\n  apiKey: \"YOUR_API_KEY\",\n  spreadsheetId: \"YOUR_SPREADSHEET_ID\"\n}\nconst url = = new URL(\"https://api.sheetson.com/v2/sheets/Cities\");\nObject.keys(params).forEach(key =&gt; url.searchParams.append(key, encodeURIComponent(params[key])));\nfetch(url).then(r =&gt; r.json())\n  .then(result =&gt; console.log(result))\n</code></pre> <p>The return value is a JSON object that contains a <code>results</code> field with a JSON array that lists the objects <pre><code>{\n  results: [\n    {\n      \"rowIndex\": 2,\n      \"name\": \"San Francisco\", \n      \"state\": \"CA\", \n      \"country\": \"USA\",\n      \"population\": \"860000\"\n    },\n    {\n      \"rowIndex\": 3,\n      \"name\": \"Los Angeles\", \n      \"state\": \"CA\", \n      \"country\": \"USA\",\n      \"population\": \"12458000\"\n    }\n    ...\n  ]\n}\n</code></pre></p>"},{"location":"manage-data/retrieve-rows/#filter-rows","title":"Filter rows","text":"<p>There are several ways to filter rows based on specific criteria. Refer to Paginate &amp; refine data in order to perform below operations:</p> <ul> <li>Paginate between multiple results set</li> <li>Limit number of rows returned</li> <li>Order rows by specific field</li> <li>Search for rows with specific criteria</li> </ul>"},{"location":"manage-data/update-rows/","title":"Updating Rows","text":""},{"location":"manage-data/update-rows/#example-data","title":"Example data","text":"<p>To get started, we prepare a sheet named Cities as below:</p> A B C D 1 name state country population 2 San Francisco CA USA 860000 <p>Note</p> <p>Please prepare the same data as above in a new (or existing) spreadsheet. You will need to use your Spreadsheet ID as descibed in Getting Started in example codes.</p>"},{"location":"manage-data/update-rows/#update-a-row","title":"Update a row","text":"<p>To change the data on a row that already exists, send a <code>PUT</code> request to the <code>rowIndex</code> URL. Any fields you don\u2019t specify will remain unchanged, so you can update just a subset of the row's data. </p> <p>For example, to change population of San Francisco in Cities sheet.</p> cURLJavascript <pre><code>curl \"https://api.sheetson.com/v2/sheets/Cities/2\" \\\n-X PUT \\\n-H \"Authorization: Bearer YOUR_API_KEY\" \\\n-H \"X-Spreadsheet-Id: YOUR_SPREADSHEET_ID\" \\\n-H \"Content-Type: application/json\" \\\n-d '{\"population\" : 3314000}'\n</code></pre> <pre><code>const fetch = require('isomorphic-fetch');\nfetch(\"https://api.sheetson.com/v2/sheets/Cities/2\", {\n  method: \"PUT\",\n  headers: {\n    \"Authorization\": \"Bearer YOUR_API_KEY\",\n    \"X-Spreadsheet-Id\": \"YOUR_SPREADSHEET_ID\",\n    \"Content-Type\": \"application/json\"\n  },\n  body: JSON.stringify({\"population\" : 3314000})\n}).then(r =&gt; r.json())\n.then(result =&gt; console.log(result))\n</code></pre> <p>The response body is a JSON object containing requesting data</p> <pre><code>{\n  \"rowIndex\": 2,\n  \"population\": \"3314000\"\n}\n</code></pre> <p>The sheet content should look like below:</p> A B C D 1 name state country population 2 San Francisco CA USA 3314000"},{"location":"reference/create/","title":"Create a new row","text":"<p>Below API specs allow to create a new row at the last row of a worksheet.</p>"},{"location":"reference/create/#http-request","title":"HTTP Request","text":"<p><code>POST https://api.sheetson.com/v2/sheets/</code>sheetName``</p>"},{"location":"reference/create/#path-parameters","title":"Path Parameters","text":"Parameters <code>sheetName</code> <code>string</code>  Name of the sheet containing data"},{"location":"reference/create/#headers","title":"Headers","text":"Parameters <code>Authorization</code> <code>Bearer YOUR_API_KEY</code> <code>X-Spreadsheet-Id</code> <code>string</code>  The ID of the spreadsheet to create new a row"},{"location":"reference/create/#request-body","title":"Request body","text":"<p>Request body contains object with keys are worksheet headers and values to add into cell.</p>"},{"location":"reference/create/#response-body","title":"Response body","text":"<p>Response body contains JSON object with <code>rowIndex</code> and requesting data.</p>"},{"location":"reference/delete/","title":"Delete a sheet row","text":"<p>Below API specs allow to delete a specific row in a worksheet.</p>"},{"location":"reference/delete/#http-request","title":"HTTP Request","text":"<p><code>DELETE https://api.sheetson.com/v2/sheets/</code>sheetName<code>/</code>rowIndex</p>"},{"location":"reference/delete/#path-parameters","title":"Path Parameters","text":"Parameters <code>sheetName</code> <code>string</code>  Name of the sheet containing data <code>rowIndex</code> <code>number</code> Position of the row to delete data"},{"location":"reference/delete/#headers","title":"Headers","text":"Parameters <code>Authorization</code> <code>Bearer YOUR_API_KEY</code> <code>X-Spreadsheet-Id</code> <code>string</code>  The ID of the spreadsheet to create new a row"},{"location":"reference/delete/#request-body","title":"Request body","text":"<p>No request body is required.</p>"},{"location":"reference/delete/#response-body","title":"Response body","text":"<p>No response body is returned.</p>"},{"location":"reference/list/","title":"Update a row","text":"<p>Below API specs allow to read data of multiple rows in a worksheet.</p>"},{"location":"reference/list/#http-request","title":"HTTP Request","text":"<p><code>GET https://api.sheetson.com/v2/sheets/</code>sheetName</p>"},{"location":"reference/list/#path-parameters","title":"Path Parameters","text":"Parameters <code>sheetName</code> <code>string</code>  Name of the sheet containing data"},{"location":"reference/list/#headers","title":"Headers","text":"Parameters <code>Authorization</code> <code>Bearer YOUR_API_KEY</code> <code>X-Spreadsheet-Id</code> <code>string</code>  The ID of the spreadsheet to create new a row"},{"location":"reference/list/#url-parameters","title":"URL Parameters","text":"Parameters limit <code>number</code>  Default to <code>24</code>, but can we change upto <code>100</code>. Used to limit number of rows returned. skip <code>number</code>  Default to <code>0</code>. Used to skip rows in returned data. order <code>string</code>  Used to sort result set. keys <code>string</code>  Comma separated list of fields to return. where <code>string</code>  Criteria to filter rows."},{"location":"reference/list/#request-body","title":"Request body","text":"<p>No request body is required.</p>"},{"location":"reference/list/#response-body","title":"Response body","text":"<p>Response body contains JSON object with <code>results</code> field contains multiple rows data.</p>"},{"location":"reference/read/","title":"Update a row","text":"<p>Below API specs allow to read data of a specific row in a worksheet.</p>"},{"location":"reference/read/#http-request","title":"HTTP Request","text":"<p><code>GET https://api.sheetson.com/v2/sheets/</code>sheetName<code>/</code>rowIndex</p>"},{"location":"reference/read/#path-parameters","title":"Path Parameters","text":"Parameters <code>sheetName</code> <code>string</code>  Name of the sheet containing data <code>rowIndex</code> <code>number</code> Position of the row to retrieve data"},{"location":"reference/read/#headers","title":"Headers","text":"Parameters <code>Authorization</code> <code>Bearer YOUR_API_KEY</code> <code>X-Spreadsheet-Id</code> <code>string</code>  The ID of the spreadsheet to create new a row"},{"location":"reference/read/#url-parameters","title":"URL Parameters","text":"Parameters keys <code>string</code>  Comma separated list of fields to return."},{"location":"reference/read/#request-body","title":"Request body","text":"<p>No request body is required.</p>"},{"location":"reference/read/#response-body","title":"Response body","text":"<p>Response body contains JSON object with <code>rowIndex</code> and row data.</p>"},{"location":"reference/update/","title":"Update a row","text":"<p>Below API specs allow to update data of a specific row in a worksheet.</p>"},{"location":"reference/update/#http-request","title":"HTTP Request","text":"<p><code>PATCH https://api.sheetson.com/v2/sheets/</code>sheetName<code>/</code>rowIndex</p>"},{"location":"reference/update/#path-parameters","title":"Path Parameters","text":"Parameters <code>sheetName</code> <code>string</code>  Name of the sheet containing data <code>rowIndex</code> <code>number</code> Position of the row to retrieve data"},{"location":"reference/update/#headers","title":"Headers","text":"Parameters <code>Authorization</code> <code>Bearer YOUR_API_KEY</code> <code>X-Spreadsheet-Id</code> <code>string</code>  The ID of the spreadsheet to create new a row"},{"location":"reference/update/#request-body","title":"Request body","text":"<p>Request body contains object with keys are worksheet headers and values to update into cell.</p>"},{"location":"reference/update/#response-body","title":"Response body","text":"<p>Response body contains JSON object with <code>rowIndex</code> and requesting data.</p>"}]}